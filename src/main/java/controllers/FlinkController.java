package controllers;

import com.google.gson.Gson;
import entities.Friend;
import controllers.DataReader;
import org.apache.flink.api.common.functions.AggregateFunction;
import org.apache.flink.api.common.functions.FlatMapFunction;
import org.apache.flink.api.common.serialization.SerializationSchema;
import org.apache.flink.api.common.serialization.SimpleStringSchema;
import org.apache.flink.streaming.api.datastream.DataStream;
import org.apache.flink.streaming.api.datastream.DataStreamSource;
import org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;
import org.apache.flink.streaming.api.windowing.time.Time;
import org.apache.flink.streaming.connectors.kafka.FlinkKafkaConsumer011;
import org.apache.flink.streaming.connectors.kafka.FlinkKafkaProducer011;
import org.apache.flink.util.Collector;
import scala.Tuple2;
import scala.Tuple3;


import java.util.ArrayList;
import java.util.Iterator;
import java.util.Properties;

public class FlinkController {

    private static String INPUT_KAFKA_TOPIC = null;

    public void calculateAvg() throws Exception {

        INPUT_KAFKA_TOPIC = "friendshipTopic";
        Properties properties = new Properties();
        properties.setProperty("bootstrap.servers", "localhost:9092");
        properties.setProperty("zookeeper.connect", "localhost:2181");
        properties.setProperty("group.id", INPUT_KAFKA_TOPIC);
        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();
        DataStreamSource<String> stream = env.addSource(new FlinkKafkaConsumer011(INPUT_KAFKA_TOPIC, new SimpleStringSchema(), properties));

        //DataStreamSource<String> stream = env.socketTextStream("localhost", 9092, "\n");

        System.out.println("got sources");
        // DataStream<Tuple11<String, String, String, String, String, Int, Double, Double ,Boolean,Boolean,Boolean>> streamTuples = stream.flatMap(new SemaphoreJson2Tuple());
        DataStream<Tuple3<String, Integer, Integer>> streamTuples = stream.flatMap(new SemaphoreJson2Tuple());

        SingleOutputStreamOperator<Double> averageSpeedStream = streamTuples
                .keyBy(new int[]{0})
                .timeWindow(Time.seconds((long)10))
                .aggregate(new AverageAggregate());



        streamTuples.addSink(new FlinkKafkaProducer011<>("localhost:9092", INPUT_KAFKA_TOPIC,  stringDoubleTuple3 -> {
            /*Gson gson = new Gson();
            String key = stringDoubleTuple3.f0;
            double value = stringDoubleTuple3.f1;
            int count = stringDoubleTuple3.f2;
            FlinkResult flinkResult = new FlinkResult(key, value, count);
            Message m = new Message(flinkDispatcherID, 70115);
            m.setFlinkResult(flinkResult);
            String result = gson.toJson(m);
            return result.getBytes();*/
            return null;
        }));


        streamTuples.print();
        //SingleOutputStreamOperator<Double> averageSpeedStream = streamTuples
        //        .keyBy(1)
        //        .timeWindow(org.apache.flink.streaming.api.windowing.time.Time.milliseconds(60))
        //        .aggregate(new AverageAggregate());


        env.execute("Window Traffic Data");

    }





/*
    Following Class executes flink for tuples generated by semaphores' sensor.
 */

    private static class AverageAggregate implements AggregateFunction<Tuple3<String, Integer, Integer>, Tuple2<Integer, Integer>, Double> {

        @Override
        public Tuple2<Integer, Integer> createAccumulator() {
            return new Tuple2<>(0, 0);
        }

        @Override
        public Tuple2<Integer, Integer> add(Tuple3<String, Integer, Integer> value, Tuple2<Integer, Integer> accumulator) {
            System.out.println("ricevuto");
            return new Tuple2<>(accumulator._1, accumulator._2 + 1);
        }

        @Override
        public Double getResult(Tuple2<Integer, Integer> accumulator) {
            //return accumulator.f0 / accumulator.f1;        }
            return accumulator._2.doubleValue();        }

        @Override
        public Tuple2<Integer, Integer> merge(Tuple2<Integer, Integer> a, Tuple2<Integer, Integer> b) {
            return new Tuple2<>(a._1 + b._1, a._2 + b._2);
        }
    }


    public static class SemaphoreJson2Tuple implements FlatMapFunction<String, Tuple3<String,Integer,Integer>> {

        @Override
        public void flatMap(String jsonString, Collector<Tuple3<String, Integer, Integer>> out) {
            ArrayList<Friend> recs = DataReader.getData(jsonString);
            Iterator irecs = recs.iterator();

            while (irecs.hasNext()) {
                Friend record = (Friend) irecs.next();
                Tuple3 tp3 = new Tuple3<>(record.getTmp(), record.getUser_1(), record.getUser_2());

                out.collect(tp3);
            }

        }


    }


}
